{"version":3,"sources":["components/img/background-placeholder.jpg","components/WeatherDisplay/WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherDisplay","props","string","className","isActive","temp","toFixed","location","country","weather_main","weather_desc","charAt","toUpperCase","slice","src","icon","alt","App","state","query","background","isLoaded","handleChange","bind","componentDidMount","handleSubmit","this","setState","placeholderImg","e","target","value","Promise","all","fetch","then","res","json","result","results","urls","full","name","sys","main","weather","description","preventDefault","backgroundStyle","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","style","onSubmit","type","onChange","placeholder","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df766124.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background-placeholder.75ff1a26.jpg\";","import React from 'react';\r\nimport './WeatherDisplay.css'\r\n\r\nconst WeatherDisplay = (props) => {\r\n    \r\n    const capatalise = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n    return (\r\n        <div className={`weather-container ${props.isActive ? \"active\" : \"\"}`}>\r\n            <h1>{`${(props.temp- 273.15).toFixed(0)}Â°C`}</h1>\r\n            <h2>{props.location}, {props.country}</h2>\r\n            <h4>{props.weather_main} - {capatalise(props.weather_desc)}</h4>\r\n            <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"Current weather icon\"></img>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default WeatherDisplay;","import React, {Component} from 'react';\nimport './App.css';\nimport WeatherDisplay from './components/WeatherDisplay/WeatherDisplay';\nimport placeholderImg from './components/img/background-placeholder.jpg'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      query: '',\n      background: '',\n      isLoaded: false,\n      location: '',\n      country: '',\n      temp: '',\n      weather_main: '',\n      weather_desc: '',\n      icon: '',\n      isActive: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({ background: placeholderImg });\n  };\n\n  handleChange(e) {\n    this.setState({query: e.target.value});\n  };\n\n\n  handleSubmit(e) {\n    Promise.all([\n      fetch(`https://api.unsplash.com/search/photos?page=1&query=${this.state.query}-city&client_id=4e2cb4fefbcb90d124c35c05112315f1a9ba5e10de372fc7eb1f54c74807ade2`)\n      .then(res => res.json()),\n      fetch(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.query}&APPID=40e3500120c6d881f6f45e3e83c48104`)\n      .then(res => res.json())\n    ])\n    .then((result) => {\n      this.setState({\n        isLoaded: true,\n        background: result[0].results[0].urls.full,\n        location: result[1].name,\n        country: result[1].sys.country,\n        temp: result[1].main.temp,\n        weather_main: result[1].weather[0].main,\n        weather_desc:  result[1].weather[0].description,\n        icon: result[1].weather[0].icon,\n        isActive: true\n      });\n    });\n    e.preventDefault();\n\n  }\n\n  render() {\n\n    const {isLoaded, background, location, temp, weather_main, weather_desc, icon, isActive, country} = this.state;\n\n    const backgroundStyle = {      \n      backgroundImage: `url(\"${background}\")`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat'\n    };\n\n      return (\n        <div \n        className=\"App\"\n        style={backgroundStyle}\n        >\n\n        <div className=\"searchbar-container\">\n          <form className=\"searchbar-content\" onSubmit={this.handleSubmit}>\n              <button className=\"btn\" type=\"submit\"><i className=\"icon fas fa-search fa-lg\"></i></button>\n              <input className=\"searchbar-input\" type=\"text\" value={this.state.query} onChange={this.handleChange} placeholder=\"Search City...\"/>\n          </form>\n         </div>\n\n        <WeatherDisplay\n          location={location}\n          temp={temp}\n          weather_main={weather_main}\n          weather_desc={weather_desc}\n          icon={icon}\n          isActive={isActive}\n          country={country}\n         />\n         \n        </div>\n      );\n     \n\n\n  \n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}