{"version":3,"sources":["config.js","components/WeatherDisplay/WeatherDisplay.js","components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["unsplashURL","unsplashAPI","weatherURL","weatherAPI","WeatherDisplay","props","string","className","temp","toFixed","location","country","weather_main","weather_desc","charAt","toUpperCase","slice","src","icon","alt","credit","href","creditLink","target","rel","Spinner","App","fetchItems","query","Promise","all","fetch","then","res","json","result","setState","loading","background","results","urls","full","name","sys","main","weather","description","user","links","html","state","search","componentDidMount","bind","handleSubmit","handleChange","this","e","value","preventDefault","backgroundStyle","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","style","onSubmit","type","onChange","placeholder","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.86d3eefc.chunk.js","sourcesContent":["\r\nconst unsplashURL = 'https://api.unsplash.com/search/photos?page=1';\r\nconst unsplashAPI = '4e2cb4fefbcb90d124c35c05112315f1a9ba5e10de372fc7eb1f54c74807ade2';\r\n\r\nconst weatherURL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst weatherAPI = '40e3500120c6d881f6f45e3e83c48104';\r\n\r\nexport {\r\n    unsplashURL,\r\n    unsplashAPI,\r\n    weatherURL,\r\n    weatherAPI\r\n}","import React from 'react';\r\nimport './WeatherDisplay.css'\r\n\r\nconst WeatherDisplay = (props) => {\r\n    \r\n    const capatalise = (string) => string.charAt(0).toUpperCase() + string.slice(1);\r\n\r\n    return (\r\n        <div className=\"weather-container\">\r\n            <h1>{`${(props.temp- 273.15).toFixed(0)}Â°C`}</h1>\r\n            <h2>{props.location}, {props.country}</h2>\r\n            <h4>{props.weather_main} - {capatalise(props.weather_desc)}</h4>\r\n            <img src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"Current weather icon\"></img>\r\n            <p>Photo: {props.credit} on <a href={props.creditLink} target=\"_blank\" rel=\"noopener noreferrer\">Unsplash</a> </p>\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default WeatherDisplay;","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return(\r\n        <div className=\"loader-container\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner","import React, {Component} from 'react';\nimport { unsplashURL, unsplashAPI, weatherURL, weatherAPI } from './config.js';\nimport './App.css';\nimport WeatherDisplay from './components/WeatherDisplay/WeatherDisplay';\nimport Spinner from './components/Spinner/Spinner'\nimport { thisTypeAnnotation } from '@babel/types';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '',\n      background: '',\n      loading: false,\n      location: '',\n      country: '',\n      temp: '',\n      weather_main: '',\n      weather_desc: '',\n      icon: '',\n      credit: '',\n      creditLink: ''\n    };    \n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchItems(\"London\");\n  };\n  \n  handleChange(e) {\n    this.setState({search: e.target.value});\n  };\n\n  handleSubmit(e) {\n    this.setState({ loading: true })\n    this.fetchItems(this.state.search);\n    e.preventDefault();\n  }\n\n  fetchItems = (query) => {\n    Promise.all([\n      fetch(`${unsplashURL}&query=${query}-city&client_id=${unsplashAPI}`)\n      .then(res => res.json()),\n      fetch(`${weatherURL}?q=${query}&APPID=${weatherAPI}`)\n      .then(res => res.json())\n    ])\n    .then((result) => {\n      this.setState({\n        loading: false,\n        background: result[0].results[0].urls.full,\n        location: result[1].name,\n        country: result[1].sys.country,\n        temp: result[1].main.temp,\n        weather_main: result[1].weather[0].main,\n        weather_desc:  result[1].weather[0].description,\n        icon: result[1].weather[0].icon,\n        credit: result[0].results[0].user.name,\n        creditLink: result[0].results[0].user.links.html\n      });\n    });\n  }\n\n\n  render() {\n\n    const {loading, background, location, temp, weather_main, weather_desc, icon, country, credit, creditLink} = this.state;\n\n    const backgroundStyle = {      \n      backgroundImage: `url(\"${background}\")`,\n      backgroundPosition: 'center',\n      backgroundSize: 'cover',\n      backgroundRepeat: 'no-repeat'\n    };\n\n      return (\n        <div \n        className=\"App\"\n        style={backgroundStyle}\n        >\n        \n          <div className=\"searchbar-container\">\n            <form className=\"searchbar-content\" onSubmit={this.handleSubmit}>\n                <button className=\"btn\" type=\"submit\"><i className=\"icon fas fa-search fa-lg\"></i></button>\n                <input className=\"searchbar-input\" type=\"text\" value={this.state.query} onChange={this.handleChange} placeholder=\"Search City...\"/>\n            </form>\n          </div>\n\n        \n          {loading ? <Spinner /> : null}\n\n          <WeatherDisplay\n            location={location}\n            temp={temp}\n            weather_main={weather_main}\n            weather_desc={weather_desc}\n            icon={icon}\n            country={country}\n            credit={credit}\n            creditLink={creditLink}\n          />\n         \n        </div>\n      );  \n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}